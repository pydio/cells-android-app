buildscript {
    // Migration in progress - see:
    // https://android-developers.googleblog.com/2024/04/jetpack-compose-compiler-moving-to-kotlin-repository.html
    // And
    // https://developer.android.com/build/migrate-to-catalogs

    repositories {
        google()
        mavenCentral()
    }

    dependencies {
        classpath libs.gradle
        classpath libs.kotlin.gradle.plugin
    }
}

plugins {
    // id "com.android.application" version "8.5.0" apply false
    alias libs.plugins.android.application apply false

    // id "com.google.devtools.ksp" version "2.0.0-1.0.22" apply false
    alias libs.plugins.ksp.devtools apply false

    // id "org.jetbrains.kotlin.android" version "2.0.0" apply false
    alias libs.plugins.kotlin.android apply false

    // id "org.jetbrains.kotlin.plugin.compose" version "2.0.0" apply false
    alias libs.plugins.kotlin.plugin.compose apply false

    // id "androidx.room" version "2.6.1" apply false
    //    alias libs.plugins.androidx.room apply false

    // Publish the generated resources as Maven Artifacts.
    //    id 'maven-publish'
}

allprojects {
    repositories {
        mavenLocal()
        google()
        mavenCentral()
    }
}

// Retrieve local context
def localProperties = new Properties()
localProperties.load(new FileInputStream(rootProject.file("local.properties")))
retrieveFromEnv(localProperties) // There must be a more elegant way to do this...

def versionProperties = new Properties()
versionProperties.load(new FileInputStream(rootProject.file("versions.properties")))

// Manage optional local sdk-java submodule
def sdkJavaCheck = new File('sdk-java/build.gradle')

// Expose custom properties to all modules in the project.
ext {
    githubUrl = 'https://github.com/pydio/cells-android-app.git'

    // Expose properties retrieved from files to child projects
    configs = localProperties
    ownVersions = versionProperties

    // Shortcut to enable building the Android layers without checking out the sdk-java repository
    useLocalSdkJava = sdkJavaCheck.exists()
}

/* Factorise some of the methods used in various sub projects */
// Pre-create generic common pom configuration:
ext.getBasePom = { repoURL ->
    return {
        licenses {
            license {
                name "The GNU Lesser General Public License, Version 3.0"
                url "http://www.gnu.org/licenses/lgpl-3.0.txt"
                distribution "repo"
            }
        }

        developers {
            developer {
                id "bsinou"
                name "Bruno Sinou"
                email "bruno.sinou@posteo.de"
            }

            developer {
                id "cdujeu"
                name "Charles du Jeu"
                email "charles@ajaxplorer.info"
            }
        }

        scm {
            url repoURL
        }
    }
}

// Override local.properties sensitive values with environment parameter
def static retrieveFromEnv(Properties props) {

    def tmpValue = System.getenv('ANDROID_KEYSTORE_PATH')
    if (tmpValue != null) {
        props['keystore.path'] = tmpValue
    }
    tmpValue = System.getenv('ANDROID_KEYSTORE_PWD')
    if (tmpValue != null) {
        props['keystore.pwd'] = tmpValue
    }
    tmpValue = System.getenv('ANDROID_SIGNKEY_ALIAS')
    if (tmpValue != null) {
        props['signkey.alias'] = tmpValue
    }
    tmpValue = System.getenv('ANDROID_SIGNKEY_PWD')
    if (tmpValue != null) {
        props['signkey.pwd'] = tmpValue
    }
}
